"""
Big Data models for ZAHAAM Stock Prediction platform
"""
from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime, ForeignKey, JSON, Text, Enum, LargeBinary
from sqlalchemy.orm import relationship
from datetime import datetime
import enum

from app.core.database import Base


class DataSource(Base):
    """Model representing a data source in the system"""
    __tablename__ = "data_sources"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), unique=True, nullable=False)
    description = Column(Text)
    api_endpoint = Column(String(255))
    credentials = Column(JSON)  # Store API keys and other credentials (should be encrypted in production)
    is_active = Column(Boolean, default=True)
    priority = Column(Integer, default=100)  # Lower number = higher priority
    last_checked = Column(DateTime)
    status = Column(String(50))  # "online", "offline", "rate_limited", etc.
    
    # Relationships
    data_points = relationship("DataPoint", back_populates="source")
    
    def __repr__(self):
        return f"<DataSource(name='{self.name}', status='{self.status}')>"


class DataPoint(Base):
    """Model representing a single data point from a source"""
    __tablename__ = "data_points"

    id = Column(Integer, primary_key=True, index=True)
    source_id = Column(Integer, ForeignKey("data_sources.id", ondelete="CASCADE"))
    ticker = Column(String(20), index=True, nullable=False)
    data_type = Column(String(50), index=True)  # "price", "news", "fundamental", "social", etc.
    date = Column(DateTime, index=True)
    data = Column(JSON)  # Flexible JSON data storage
    raw_data = Column(Text)  # Optional raw data
    processed = Column(Boolean, default=False)
    
    # Relationships
    source = relationship("DataSource", back_populates="data_points")
    
    def __repr__(self):
        return f"<DataPoint(ticker='{self.ticker}', type='{self.data_type}', date='{self.date}')>"


class StockMetrics(Base):
    """Additional stock metrics beyond the basic price data"""
    __tablename__ = "stock_metrics"

    id = Column(Integer, primary_key=True, index=True)
    stock_id = Column(Integer, ForeignKey("stocks.id", ondelete="CASCADE"), nullable=False)
    date = Column(DateTime, index=True, nullable=False)
    
    # Fundamental metrics
    pe_ratio = Column(Float)
    pb_ratio = Column(Float)
    dividend_yield = Column(Float)
    eps = Column(Float)
    revenue = Column(Float)
    profit_margin = Column(Float)
    debt_to_equity = Column(Float)
    
    # Market metrics
    market_cap = Column(Float)
    avg_volume = Column(Float)
    relative_volume = Column(Float)
    beta = Column(Float)
    
    # Volatility metrics
    historical_volatility = Column(Float)
    atr = Column(Float)  # Average True Range
    
    # Sentiment metrics
    news_sentiment = Column(Float)  # -1 to 1 scale
    social_sentiment = Column(Float)  # -1 to 1 scale
    
    # Relationships
    stock = relationship("Stock", backref="metrics")
    
    def __repr__(self):
        return f"<StockMetrics(ticker='{self.stock.ticker}', date='{self.date}')>"


class MLModel(Base):
    """Machine Learning model metadata"""
    __tablename__ = "ml_models"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    description = Column(Text)
    model_type = Column(String(50))  # "regression", "classification", "time_series", etc.
    target = Column(String(50))  # What the model is predicting
    version = Column(String(20))
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    metrics = Column(JSON)  # Performance metrics
    parameters = Column(JSON)  # Model parameters
    is_active = Column(Boolean, default=True)
    
    # Binary storage of serialized model (optional, could be stored in file system instead)
    model_data = Column(LargeBinary)
    
    # Relationships
    predictions = relationship("StockPrediction", back_populates="model")
    
    def __repr__(self):
        return f"<MLModel(name='{self.name}', version='{self.version}')>"


class StockPrediction(Base):
    """Predictions generated by ML models"""
    __tablename__ = "stock_predictions"

    id = Column(Integer, primary_key=True, index=True)
    stock_id = Column(Integer, ForeignKey("stocks.id", ondelete="CASCADE"), nullable=False)
    model_id = Column(Integer, ForeignKey("ml_models.id", ondelete="CASCADE"), nullable=False)
    prediction_date = Column(DateTime, default=datetime.now)
    target_date = Column(DateTime)  # Date the prediction is for
    
    # Prediction values
    predicted_price = Column(Float)
    confidence = Column(Float)
    upper_bound = Column(Float)  # For confidence intervals
    lower_bound = Column(Float)  # For confidence intervals
    
    # Trading signals
    signal = Column(String(20))  # "BUY", "SELL", "HOLD"
    signal_strength = Column(Float)  # 0 to 1
    
    # Price targets
    entry_price = Column(Float)
    stop_loss = Column(Float)
    take_profit = Column(Float)
    risk_reward = Column(Float)
    
    # Additional data
    features_used = Column(JSON)  # Features that went into the prediction
    explanation = Column(Text)  # Explanation of the prediction
    
    # Relationships
    stock = relationship("Stock", backref="predictions")
    model = relationship("MLModel", back_populates="predictions")
    
    def __repr__(self):
        return f"<StockPrediction(ticker='{self.stock.ticker}', target_date='{self.target_date}')>"


class MarketDataSnapshot(Base):
    """Periodic snapshots of market-wide data"""
    __tablename__ = "market_data_snapshots"

    id = Column(Integer, primary_key=True, index=True)
    date = Column(DateTime, index=True, nullable=False)
    
    # Market indices
    sp500 = Column(Float)
    nasdaq = Column(Float)
    dow_jones = Column(Float)
    vix = Column(Float)  # Volatility index
    
    # Sector performance
    sector_performance = Column(JSON)  # Dict of sector -> performance
    
    # Macroeconomic indicators
    interest_rate = Column(Float)
    inflation_rate = Column(Float)
    unemployment_rate = Column(Float)
    gdp_growth = Column(Float)
    
    # Market breadth
    advancing_stocks = Column(Integer)
    declining_stocks = Column(Integer)
    
    # Trading volumes
    total_volume = Column(Float)
    average_volume = Column(Float)
    
    def __repr__(self):
        return f"<MarketDataSnapshot(date='{self.date}')>"


class NewsArticle(Base):
    """News articles related to stocks or markets"""
    __tablename__ = "news_articles"
    
    id = Column(String, primary_key=True)
    ticker = Column(String, index=True, nullable=True)  # Can be null for general market news
    title = Column(String, nullable=False)
    source = Column(String, nullable=False)
    published_at = Column(DateTime, nullable=False)
    url = Column(String, nullable=False)
    summary = Column(Text, nullable=True)
    sentiment = Column(Float, nullable=True)  # -1 to 1 scale
    importance = Column(Integer, nullable=True)  # 1-10 scale
    
    # Relationship for stock mentions
    stock_mentions = relationship("StockNewsMention", back_populates="news")
    keywords = Column(JSON, nullable=True)
    created_at = Column(DateTime, default=datetime.now)


class NotificationType(enum.Enum):
    SIGNAL_CHANGE = "signal_change"
    PRICE_ALERT = "price_alert"
    NEWS = "news"
    PREDICTION_UPDATE = "prediction_update"
    SYSTEM = "system"


class NotificationPriority(enum.Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    URGENT = "urgent"


class Notification(Base):
    __tablename__ = "notifications"
    
    id = Column(String, primary_key=True)
    user_id = Column(String, index=True, nullable=True)  # If null, it's a global notification
    ticker = Column(String, index=True, nullable=True)  # Can be null for system notifications
    type = Column(Enum(NotificationType), nullable=False, index=True)
    priority = Column(Enum(NotificationPriority), nullable=False, default=NotificationPriority.MEDIUM)
    title = Column(String, nullable=False)
    message = Column(Text, nullable=False)
    data = Column(JSON, nullable=True)  # Additional data like signal details, price points, etc.
    is_read = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.now)
    expires_at = Column(DateTime, nullable=True)  # When the notification should expire


class NotificationSettings(Base):
    __tablename__ = "notification_settings"
    
    id = Column(String, primary_key=True)
    user_id = Column(String, index=True, nullable=False)
    enable_signal_change = Column(Boolean, default=True)
    enable_price_alerts = Column(Boolean, default=True)
    enable_news = Column(Boolean, default=True)
    enable_prediction_updates = Column(Boolean, default=True)
    enable_system = Column(Boolean, default=True)
    min_priority = Column(Enum(NotificationPriority), default=NotificationPriority.LOW)
    watched_tickers = Column(JSON, nullable=True)  # List of tickers to get notifications for
    email_notifications = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)


class StockNewsMention(Base):
    """Many-to-many relationship between stocks and news articles"""
    __tablename__ = "stock_news_mentions"

    id = Column(Integer, primary_key=True, index=True)
    stock_id = Column(Integer, ForeignKey("stocks.id", ondelete="CASCADE"))
    news_id = Column(Integer, ForeignKey("news_articles.id", ondelete="CASCADE"))
    mention_count = Column(Integer, default=1)
    is_primary = Column(Boolean, default=False)  # Is this stock the primary subject
    impact_score = Column(Float)  # Estimated impact on stock (-1 to 1)
    
    # Relationships
    stock = relationship("Stock", backref="news_mentions")
    news = relationship("NewsArticle", back_populates="stock_mentions")
    
    def __repr__(self):
        return f"<StockNewsMention(stock='{self.stock.ticker}', news_id={self.news_id})>"


class DataProcessingJob(Base):
    """Track data processing jobs"""
    __tablename__ = "data_processing_jobs"

    id = Column(Integer, primary_key=True, index=True)
    job_type = Column(String(50))  # "data_collection", "feature_engineering", "model_training", etc.
    status = Column(String(20))  # "pending", "running", "completed", "failed"
    started_at = Column(DateTime, default=datetime.now)
    completed_at = Column(DateTime)
    parameters = Column(JSON)
    results = Column(JSON)
    error_message = Column(Text)
    
    def __repr__(self):
        return f"<DataProcessingJob(type='{self.job_type}', status='{self.status}')>"
